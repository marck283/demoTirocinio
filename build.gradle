buildscript {
    repositories {
        mavenCentral()
        maven {
            url = "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    alias libs.plugins.java
    alias libs.plugins.com.google.cloud.artifactregistry.gradle.plugin
    alias libs.plugins.application
    alias libs.plugins.com.github.johnrengelman.shadow
}

application {
    mainClass.set('it.disi.unitn.lasagna.Main')
    //applicationDefaultJvmArgs = ["-Djava.library.path=" + file("${buildDir}/libs/ffcodec/shared").absolutePath]
}

group = 'it.disi.unitn.lasagna'
version = '1.0'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url = "artifactregistry://europe-west8-maven.pkg.dev/tirocinio-380209/ffmpeg-java"
    }

    exclusiveContent {
        forRepository {
            maven {
                url = 'https://mlt.jfrog.io/artifactory/mlt-mvn-releases-local'
            }
        }
        filter {
            includeGroup 'de.dfki.lt.jtok'
        }
    }
}

jar {
    manifest {
        attributes "Main-Class": "it.disi.unitn.lasagna.Main"
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

// Output to build/libs folder
shadowJar {
    archiveBaseName.set('tirocinio-shadow')
    archiveClassifier.set('')
    archiveVersion.set('1.0')
}

dependencies {
    implementation libs.annotations
    testImplementation libs.jupiter.api
    testRuntimeOnly libs.jupiter.engine

    implementation libs.commons.lang3
    implementation libs.commons.exec

    implementation libs.slf4j.api
    implementation libs.com.google.gson
    implementation libs.ffmpeg.java.id //Ultima versione
    implementation libs.org.burningwave.core

}

/*import org.gradle.internal.jvm.Jvm

model {
    platforms {
        x64 {
            architecture "x86_64"
        }
    }

    components {
        compileFfcodecSharedLibraryFfcodecCpp(NativeLibrarySpec) {
            targetPlatform "x64"
            binaries.all {
                def jvmHome = Jvm.current().javaHome
                if (targetPlatform.operatingSystem.macOsX) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/darwin"
                    cCompiler.args '-mmacosx-version-min=10.4'
                    linker.args '-mmacosx-version-min=10.4'
                } else if (targetPlatform.operatingSystem.linux) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/linux"
                    cCompiler.args '-D_FILE_OFFSET_BITS=64'
                } else if (targetPlatform.operatingSystem.windows) {
                    cCompiler.args "-I${jvmHome}/include"
                    cCompiler.args "-I${jvmHome}/include/win32"
                } else if (targetPlatform.operatingSystem.freeBSD) {
                    cCompiler.args '-I', "${jvmHome}/include"
                    cCompiler.args '-I', "${jvmHome}/include/freebsd"
                }
            }
        }
    }
}

tasks.register("compileFfcodecSharedLibraryFfcodecCpp") {
    inputs.files compileJava
}*/

test {
    useJUnitPlatform()
}